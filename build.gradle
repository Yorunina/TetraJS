buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {url "https://plugins.gradle.org/m2/"}
        maven { url = 'https://repo.spongepowered.org/maven'}
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "0.7-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'


jarJar.enable()

version = mod_version
group = 'net.yorunina.tetrajs' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tetrajs'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${mc_version}"

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                tetrajs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                tetrajs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tetrajs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tetrajs {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
    maven { url='https://repo.spongepowered.org/repository/maven-public/' }
    maven {
        name = "cursemaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation fg.deobf("dev.architectury:architectury-forge:${rootProject.architectury_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rootProject.rhino_version}")
    implementation fg.deobf("curse.maven:tetra-289712:4448541")
    implementation fg.deobf("curse.maven:mutil-351914:3941314")
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "main.refmap.json"
    add sourceSets.main, "tetra.refmap.json"
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "TetraJS",
                "Specification-Vendor"    : "YoruNina",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "YoruNina",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task jarJarRelease {
    doLast {
        tasks.jarJar {
            classifier = ''
        }
    }
    finalizedBy tasks.jarJar
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}